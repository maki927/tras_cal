#pragma once
#include<vector>

//+++++++++++++++++クラスの役割++++++++++++++++++++++++
//
//配列をこのクラスに入れることで、様々な操作ができる。
//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++

class ARRAYMAG
{
public:
	//**********************メンバ関数**************************

	//========================================
	//  配列を読み込む
	//-------------引数について---------------
	//  p...配列のポインタ
	//  num...配列の要素数
	//========================================
	void ArrayIn(float* p, int num);

	//========================================
	//  配列の要素をすべて0にする
	//  要素がすべて0の配列を生成
	//-------------引数について---------------
	//  num...配列の要素数
	//========================================
	void Array0(int num);
	void Array0();

	//========================================
	//  配列、要素を付け加える
	//-------------引数について---------------
	//  data...要素
	//  p...配列のポインタ
	//  num...配列の要素数
	//========================================
	void ArrayAdd(float data); //配列の後ろに付け加え
	void ArrayAdd(float* p, int num); //配列の後ろに付け加え
	void ArrayAddf(float data); //配列の前に付け加え

	//========================================
	//  配列の要素を小さい順に並べる
	//========================================
	void sort_min_max();

	//========================================
	//  配列の要素を小さい順に並べ、同じ数値を削除する
	//========================================
	void ecn_del();

	//========================================
	//  値が等間隔の配列を生成
	//-------------引数について---------------
	//  min...配列の最小値
	//  inter...数値の間隔
	//  max...配列の最大値
	//========================================
	void GenArray(float min, float inter, float max);

	//========================================
	//  指定した要素を削除
	//-------------引数について---------------
	//  num...要素のある場所
	//========================================
	void DeleteData(int num);

	//========================================
	//  配列を表示
	//========================================
	void DispArray();

	//========================================
	//  指定した範囲内の要素の抽出
	//-------------引数について---------------
	//  min...最小値
	//  max...最大値
	//  v...オーバーロード用の変数
	//------------戻り値について--------------
	//  int...要素なしの時1、要素がある場合0
	//  ARRAYMAG...抽出した配列を持ったクラス
	//========================================
	int pickup(float min, float max);
	ARRAYMAG pickup(float min, float max, int v);

	//========================================
	//  指定した範囲内の要素に伴う要素の抽出
	//-------------引数について---------------
	//  min...最小値
	//  max...最大値
	//  obj...抽出対象
	//------------戻り値について--------------
	//  ARRAYMAG...抽出された配列を持ったクラス
	//========================================
	ARRAYMAG pickup2(float min, float max, ARRAYMAG obj);

	//========================================
	//  メンバ変数を得る
	//========================================
	float* GetArray() { return ARRAY; }
	float GetData(int num);
	int GetNum() { return datanum; }

	//**********************************************************


	//***************コントラスタ、デストラクタ*****************
	ARRAYMAG();
	ARRAYMAG(float* p, int num);
	ARRAYMAG(const ARRAYMAG& obj);
	~ARRAYMAG() { delete[] ARRAY; return; }
	//**********************************************************


	//*****************演算子のオーバーロード*******************
	ARRAYMAG operator+(ARRAYMAG obj); //配列の各要素を足す
	ARRAYMAG operator*(float num); //配列の各要素に数値をかける
	ARRAYMAG operator/(float num); //配列の各要素を数値で割る
	ARRAYMAG operator/(ARRAYMAG obj); //配列の各要素を割る
	ARRAYMAG operator+=(ARRAYMAG obj); //配列の各要素を足す
	ARRAYMAG& operator=(const ARRAYMAG& obj); //代入演算子のオーバーロード

	friend ARRAYMAG operator*(float num, ARRAYMAG obj); //配列の各要素に数値をかける
	//**********************************************************

private:

	//**************************メンバ変数**********************
	float* ARRAY;
	int datanum;
	//**********************************************************
};

